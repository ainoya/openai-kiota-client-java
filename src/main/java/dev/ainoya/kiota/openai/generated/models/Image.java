package dev.ainoya.kiota.openai.generated.models;

import com.microsoft.kiota.serialization.AdditionalDataHolder;
import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
/**
 * Represents the url or the content of an image generated by the OpenAI API.
 */
@jakarta.annotation.Generated("com.microsoft.kiota")
public class Image implements AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    private Map<String, Object> additionalData;
    /**
     * The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     */
    private String b64Json;
    /**
     * The prompt that was used to generate the image, if there was any revision to the prompt.
     */
    private String revisedPrompt;
    /**
     * The URL of the generated image, if `response_format` is `url` (default).
     */
    private String url;
    /**
     * Instantiates a new Image and sets the default values.
     */
    public Image() {
        this.setAdditionalData(new HashMap<>());
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a Image
     */
    @jakarta.annotation.Nonnull
    public static Image createFromDiscriminatorValue(@jakarta.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new Image();
    }
    /**
     * Gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @return a Map<String, Object>
     */
    @jakarta.annotation.Nonnull
    public Map<String, Object> getAdditionalData() {
        return this.additionalData;
    }
    /**
     * Gets the b64_json property value. The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     * @return a String
     */
    @jakarta.annotation.Nullable
    public String getB64Json() {
        return this.b64Json;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, java.util.function.Consumer<ParseNode>>
     */
    @jakarta.annotation.Nonnull
    public Map<String, java.util.function.Consumer<ParseNode>> getFieldDeserializers() {
        final HashMap<String, java.util.function.Consumer<ParseNode>> deserializerMap = new HashMap<String, java.util.function.Consumer<ParseNode>>(3);
        deserializerMap.put("b64_json", (n) -> { this.setB64Json(n.getStringValue()); });
        deserializerMap.put("revised_prompt", (n) -> { this.setRevisedPrompt(n.getStringValue()); });
        deserializerMap.put("url", (n) -> { this.setUrl(n.getStringValue()); });
        return deserializerMap;
    }
    /**
     * Gets the revised_prompt property value. The prompt that was used to generate the image, if there was any revision to the prompt.
     * @return a String
     */
    @jakarta.annotation.Nullable
    public String getRevisedPrompt() {
        return this.revisedPrompt;
    }
    /**
     * Gets the url property value. The URL of the generated image, if `response_format` is `url` (default).
     * @return a String
     */
    @jakarta.annotation.Nullable
    public String getUrl() {
        return this.url;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public void serialize(@jakarta.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        writer.writeStringValue("b64_json", this.getB64Json());
        writer.writeStringValue("revised_prompt", this.getRevisedPrompt());
        writer.writeStringValue("url", this.getUrl());
        writer.writeAdditionalData(this.getAdditionalData());
    }
    /**
     * Sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param value Value to set for the AdditionalData property.
     */
    public void setAdditionalData(@jakarta.annotation.Nullable final Map<String, Object> value) {
        this.additionalData = value;
    }
    /**
     * Sets the b64_json property value. The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     * @param value Value to set for the b64_json property.
     */
    public void setB64Json(@jakarta.annotation.Nullable final String value) {
        this.b64Json = value;
    }
    /**
     * Sets the revised_prompt property value. The prompt that was used to generate the image, if there was any revision to the prompt.
     * @param value Value to set for the revised_prompt property.
     */
    public void setRevisedPrompt(@jakarta.annotation.Nullable final String value) {
        this.revisedPrompt = value;
    }
    /**
     * Sets the url property value. The URL of the generated image, if `response_format` is `url` (default).
     * @param value Value to set for the url property.
     */
    public void setUrl(@jakarta.annotation.Nullable final String value) {
        this.url = value;
    }
}
