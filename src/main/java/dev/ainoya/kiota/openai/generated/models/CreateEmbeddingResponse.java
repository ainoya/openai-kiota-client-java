package dev.ainoya.kiota.openai.generated.models;

import com.microsoft.kiota.serialization.AdditionalDataHolder;
import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
@jakarta.annotation.Generated("com.microsoft.kiota")
public class CreateEmbeddingResponse implements AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    private Map<String, Object> additionalData;
    /**
     * The list of embeddings generated by the model.
     */
    private java.util.List<Embedding> data;
    /**
     * The name of the model used to generate the embedding.
     */
    private String model;
    /**
     * The object type, which is always "list".
     */
    private CreateEmbeddingResponseObject object;
    /**
     * The usage information for the request.
     */
    private CreateEmbeddingResponseUsage usage;
    /**
     * Instantiates a new CreateEmbeddingResponse and sets the default values.
     */
    public CreateEmbeddingResponse() {
        this.setAdditionalData(new HashMap<>());
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a CreateEmbeddingResponse
     */
    @jakarta.annotation.Nonnull
    public static CreateEmbeddingResponse createFromDiscriminatorValue(@jakarta.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new CreateEmbeddingResponse();
    }
    /**
     * Gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @return a Map<String, Object>
     */
    @jakarta.annotation.Nonnull
    public Map<String, Object> getAdditionalData() {
        return this.additionalData;
    }
    /**
     * Gets the data property value. The list of embeddings generated by the model.
     * @return a java.util.List<Embedding>
     */
    @jakarta.annotation.Nullable
    public java.util.List<Embedding> getData() {
        return this.data;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, java.util.function.Consumer<ParseNode>>
     */
    @jakarta.annotation.Nonnull
    public Map<String, java.util.function.Consumer<ParseNode>> getFieldDeserializers() {
        final HashMap<String, java.util.function.Consumer<ParseNode>> deserializerMap = new HashMap<String, java.util.function.Consumer<ParseNode>>(4);
        deserializerMap.put("data", (n) -> { this.setData(n.getCollectionOfObjectValues(Embedding::createFromDiscriminatorValue)); });
        deserializerMap.put("model", (n) -> { this.setModel(n.getStringValue()); });
        deserializerMap.put("object", (n) -> { this.setObject(n.getEnumValue(CreateEmbeddingResponseObject::forValue)); });
        deserializerMap.put("usage", (n) -> { this.setUsage(n.getObjectValue(CreateEmbeddingResponseUsage::createFromDiscriminatorValue)); });
        return deserializerMap;
    }
    /**
     * Gets the model property value. The name of the model used to generate the embedding.
     * @return a String
     */
    @jakarta.annotation.Nullable
    public String getModel() {
        return this.model;
    }
    /**
     * Gets the object property value. The object type, which is always "list".
     * @return a CreateEmbeddingResponseObject
     */
    @jakarta.annotation.Nullable
    public CreateEmbeddingResponseObject getObject() {
        return this.object;
    }
    /**
     * Gets the usage property value. The usage information for the request.
     * @return a CreateEmbeddingResponseUsage
     */
    @jakarta.annotation.Nullable
    public CreateEmbeddingResponseUsage getUsage() {
        return this.usage;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public void serialize(@jakarta.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        writer.writeCollectionOfObjectValues("data", this.getData());
        writer.writeStringValue("model", this.getModel());
        writer.writeEnumValue("object", this.getObject());
        writer.writeObjectValue("usage", this.getUsage());
        writer.writeAdditionalData(this.getAdditionalData());
    }
    /**
     * Sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param value Value to set for the AdditionalData property.
     */
    public void setAdditionalData(@jakarta.annotation.Nullable final Map<String, Object> value) {
        this.additionalData = value;
    }
    /**
     * Sets the data property value. The list of embeddings generated by the model.
     * @param value Value to set for the data property.
     */
    public void setData(@jakarta.annotation.Nullable final java.util.List<Embedding> value) {
        this.data = value;
    }
    /**
     * Sets the model property value. The name of the model used to generate the embedding.
     * @param value Value to set for the model property.
     */
    public void setModel(@jakarta.annotation.Nullable final String value) {
        this.model = value;
    }
    /**
     * Sets the object property value. The object type, which is always "list".
     * @param value Value to set for the object property.
     */
    public void setObject(@jakarta.annotation.Nullable final CreateEmbeddingResponseObject value) {
        this.object = value;
    }
    /**
     * Sets the usage property value. The usage information for the request.
     * @param value Value to set for the usage property.
     */
    public void setUsage(@jakarta.annotation.Nullable final CreateEmbeddingResponseUsage value) {
        this.usage = value;
    }
}
